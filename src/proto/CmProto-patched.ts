/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.1
 * source: src/proto/CmProto.proto
 * Patch import "@package" & KVPair constructor
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "@thegraid/wspbclient";
import * as pb_1 from "google-protobuf";
export enum CmType {
    cm_none = 0,
    cm_clik = 1,
    cm_dand = 2,
    cm_mark = 3,
    cm_draw = 4,
    cm_move = 5,
    cm_next = 6,
    cm_undo = 7,
    cm_join = 8,
    cm_chat = 9,
    cm_cdir = 11,
    cm_param = 12
}
export enum typedMsg_value {
    notSet = 0,
    boolValue = 3,
    intValue = 4,
    strValue = 5
}
export enum cmField {
    cmField_0 = 0,
    cmField_type = 1,
    cmField_client = 2,
    cmField_player = 3,
    cmField_name = 4,
    cmField_json = 5,
    cmField_srcSlot = 6,
    cmField_inform = 7,
    cmField_dstSlot = 8,
    cmField_count = 9,
    cmField_roster = 10,
    cmField_client_to = 11,
    cmField_params = 12
}
export class CmSlot extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        row?: number;
        col?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("row" in data && data.row != undefined) {
                this.row = data.row;
            }
            if ("col" in data && data.col != undefined) {
                this.col = data.col;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get row() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set row(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get col() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set col(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        name?: string;
        row?: number;
        col?: number;
    }): CmSlot {
        const message = new CmSlot({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.row != null) {
            message.row = data.row;
        }
        if (data.col != null) {
            message.col = data.col;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            row?: number;
            col?: number;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.row != null) {
            data.row = this.row;
        }
        if (this.col != null) {
            data.col = this.col;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.row != 0)
            writer.writeInt32(2, this.row);
        if (this.col != 0)
            writer.writeInt32(4, this.col);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CmSlot {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CmSlot();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.row = reader.readInt32();
                    break;
                case 4:
                    message.col = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): CmSlot {
        return CmSlot.deserialize(bytes);
    }
}
export class TypedMsg extends pb_1.Message {
    #one_of_decls: number[][] = [[3, 4, 5]];
    constructor(data?: any[] | ({} & (({
        boolValue?: boolean;
        intValue?: never;
        strValue?: never;
    } | {
        boolValue?: never;
        intValue?: number;
        strValue?: never;
    } | {
        boolValue?: never;
        intValue?: never;
        strValue?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("boolValue" in data && data.boolValue != undefined) {
                this.boolValue = data.boolValue;
            }
            if ("intValue" in data && data.intValue != undefined) {
                this.intValue = data.intValue;
            }
            if ("strValue" in data && data.strValue != undefined) {
                this.strValue = data.strValue;
            }
        }
    }
    get boolValue() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set boolValue(value: boolean) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_boolValue() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get intValue() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set intValue(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_intValue() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get strValue() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set strValue(value: string) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
    }
    get has_strValue() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get whichValue() {
        const cases: {
            [index: number]: undefined | "boolValue" | "intValue" | "strValue";
        } = {
            0: undefined,
            3: "boolValue",
            4: "intValue",
            5: "strValue"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5])];
    }
    get value(): boolean | number | string {
        return this[this.whichValue]
    }
    static fromObject(data: {
        boolValue?: boolean;
        intValue?: number;
        strValue?: string;
    }): TypedMsg {
        const message = new TypedMsg({});
        if (data.boolValue != null) {
            message.boolValue = data.boolValue;
        }
        if (data.intValue != null) {
            message.intValue = data.intValue;
        }
        if (data.strValue != null) {
            message.strValue = data.strValue;
        }
        return message;
    }
    toObject() {
        const data: {
            boolValue?: boolean;
            intValue?: number;
            strValue?: string;
        } = {};
        if (this.boolValue != null) {
            data.boolValue = this.boolValue;
        }
        if (this.intValue != null) {
            data.intValue = this.intValue;
        }
        if (this.strValue != null) {
            data.strValue = this.strValue;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_boolValue)
            writer.writeBool(3, this.boolValue);
        if (this.has_intValue)
            writer.writeInt32(4, this.intValue);
        if (this.has_strValue)
            writer.writeString(5, this.strValue);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TypedMsg {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TypedMsg();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 3:
                    message.boolValue = reader.readBool();
                    break;
                case 4:
                    message.intValue = reader.readInt32();
                    break;
                case 5:
                    message.strValue = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): TypedMsg {
        return TypedMsg.deserialize(bytes);
    }
}
export class KVpair extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        value?: TypedMsg | number | string | boolean;  // Hack to allow inner value in constructor
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("value" in data && data.value != undefined) {
                // Hack the constructor to accept value as TypedMsg.value:
                let value = data.value
                if (typeof (value) === 'number') value = new TypedMsg({ intValue: value })
                if (typeof (value) === 'string') value = new TypedMsg({ strValue: value })
                if (typeof (value) === 'boolean') value = new TypedMsg({ boolValue: value })
                this.value = value;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get value() {
        return pb_1.Message.getWrapperField(this, TypedMsg, 2) as TypedMsg;
    }
    set value(value: TypedMsg) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_value() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        name?: string;
        value?: ReturnType<typeof TypedMsg.prototype.toObject>;
    }): KVpair {
        const message = new KVpair({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.value != null) {
            message.value = TypedMsg.fromObject(data.value);
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            value?: ReturnType<typeof TypedMsg.prototype.toObject>;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.value != null) {
            data.value = this.value.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.has_value)
            writer.writeMessage(2, this.value, () => this.value.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KVpair {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KVpair();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.value, () => message.value = TypedMsg.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): KVpair {
        return KVpair.deserialize(bytes);
    }
}
export class CmMsgBase extends pb_1.Message {
    #one_of_decls: number[][] = [];

    get has_type() { return pb_1.Message.getField(this, cmField.cmField_type) }
    get has_client() { return pb_1.Message.getField(this, cmField.cmField_client) }
    get has_player() { return pb_1.Message.getField(this, cmField.cmField_player) }
    get has_name() { return pb_1.Message.getField(this, cmField.cmField_name) }
    get has_json() { return pb_1.Message.getField(this, cmField.cmField_json) }
    //get has_srcSlot() { return pb_1.Message.getField(this, cmField.cmField_srcSlot) }
    //get has_dstSlot() { return pb_1.Message.getField(this, cmField.cmField_dstSlot) }
    get has_inform() { return pb_1.Message.getField(this, cmField.cmField_inform) }
    get has_count() { return pb_1.Message.getField(this, cmField.cmField_count) }
    get has_client_to() { return pb_1.Message.getField(this, cmField.cmField_client_to) }
    get has_roster() { return this.roster?.length > 0 }
    get has_params() { return pb_1.Message.getField(this, cmField.cmField_params) }

    constructor(data?: any[] | {
        type?: CmType;
        client?: number;
        player?: number;
        name?: string;
        json?: string;
        srcSlot?: CmSlot;
        inform?: string;
        dstSlot?: CmSlot;
        count?: number;
        client_to?: number;
        roster?: dependency_1.Rost[];
        params?: KVpair[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11, 12], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("client" in data && data.client != undefined) {
                this.client = data.client;
            }
            if ("player" in data && data.player != undefined) {
                this.player = data.player;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("json" in data && data.json != undefined) {
                this.json = data.json;
            }
            if ("srcSlot" in data && data.srcSlot != undefined) {
                this.srcSlot = data.srcSlot;
            }
            if ("inform" in data && data.inform != undefined) {
                this.inform = data.inform;
            }
            if ("dstSlot" in data && data.dstSlot != undefined) {
                this.dstSlot = data.dstSlot;
            }
            if ("count" in data && data.count != undefined) {
                this.count = data.count;
            }
            if ("client_to" in data && data.client_to != undefined) {
                this.client_to = data.client_to;
            }
            if ("roster" in data && data.roster != undefined) {
                this.roster = data.roster;
            }
            if ("params" in data && data.params != undefined) {
                this.params = data.params;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, CmType.cm_none) as CmType;
    }
    set type(value: CmType) {
        pb_1.Message.setField(this, 1, value);
    }
    get client() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set client(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get player() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set player(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get json() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set json(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get srcSlot() {
        return pb_1.Message.getWrapperField(this, CmSlot, 6) as CmSlot;
    }
    set srcSlot(value: CmSlot) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_srcSlot() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get inform() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set inform(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get dstSlot() {
        return pb_1.Message.getWrapperField(this, CmSlot, 8) as CmSlot;
    }
    set dstSlot(value: CmSlot) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_dstSlot() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get count() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set count(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get client_to() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set client_to(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get roster() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Rost, 11) as dependency_1.Rost[];
    }
    set roster(value: dependency_1.Rost[]) {
        pb_1.Message.setRepeatedWrapperField(this, 11, value);
    }
    get params() {
        return pb_1.Message.getRepeatedWrapperField(this, KVpair, 12) as KVpair[];
    }
    set params(value: KVpair[]) {
        pb_1.Message.setRepeatedWrapperField(this, 12, value);
    }
    static fromObject(data: {
        type?: CmType;
        client?: number;
        player?: number;
        name?: string;
        json?: string;
        srcSlot?: ReturnType<typeof CmSlot.prototype.toObject>;
        inform?: string;
        dstSlot?: ReturnType<typeof CmSlot.prototype.toObject>;
        count?: number;
        client_to?: number;
        roster?: ReturnType<typeof dependency_1.Rost.prototype.toObject>[];
        params?: ReturnType<typeof KVpair.prototype.toObject>[];
    }): CmMsgBase {
        const message = new CmMsgBase({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.client != null) {
            message.client = data.client;
        }
        if (data.player != null) {
            message.player = data.player;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.json != null) {
            message.json = data.json;
        }
        if (data.srcSlot != null) {
            message.srcSlot = CmSlot.fromObject(data.srcSlot);
        }
        if (data.inform != null) {
            message.inform = data.inform;
        }
        if (data.dstSlot != null) {
            message.dstSlot = CmSlot.fromObject(data.dstSlot);
        }
        if (data.count != null) {
            message.count = data.count;
        }
        if (data.client_to != null) {
            message.client_to = data.client_to;
        }
        if (data.roster != null) {
            message.roster = data.roster.map(item => dependency_1.Rost.fromObject(item));
        }
        if (data.params != null) {
            message.params = data.params.map(item => KVpair.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            type?: CmType;
            client?: number;
            player?: number;
            name?: string;
            json?: string;
            srcSlot?: ReturnType<typeof CmSlot.prototype.toObject>;
            inform?: string;
            dstSlot?: ReturnType<typeof CmSlot.prototype.toObject>;
            count?: number;
            client_to?: number;
            roster?: ReturnType<typeof dependency_1.Rost.prototype.toObject>[];
            params?: ReturnType<typeof KVpair.prototype.toObject>[];
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.client != null) {
            data.client = this.client;
        }
        if (this.player != null) {
            data.player = this.player;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.json != null) {
            data.json = this.json;
        }
        if (this.srcSlot != null) {
            data.srcSlot = this.srcSlot.toObject();
        }
        if (this.inform != null) {
            data.inform = this.inform;
        }
        if (this.dstSlot != null) {
            data.dstSlot = this.dstSlot.toObject();
        }
        if (this.count != null) {
            data.count = this.count;
        }
        if (this.client_to != null) {
            data.client_to = this.client_to;
        }
        if (this.roster != null) {
            data.roster = this.roster.map((item: dependency_1.Rost) => item.toObject());
        }
        if (this.params != null) {
            data.params = this.params.map((item: KVpair) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != CmType.cm_none)
            writer.writeEnum(1, this.type);
        if (this.client != 0)
            writer.writeInt32(2, this.client);
        if (this.player != 0)
            writer.writeInt32(3, this.player);
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.json.length)
            writer.writeString(5, this.json);
        if (this.has_srcSlot)
            writer.writeMessage(6, this.srcSlot, () => this.srcSlot.serialize(writer));
        if (this.inform.length)
            writer.writeString(7, this.inform);
        if (this.has_dstSlot)
            writer.writeMessage(8, this.dstSlot, () => this.dstSlot.serialize(writer));
        if (this.count != 0)
            writer.writeInt32(9, this.count);
        if (this.client_to != 0)
            writer.writeInt32(10, this.client_to);
        if (this.roster.length)
            writer.writeRepeatedMessage(11, this.roster, (item: dependency_1.Rost) => item.serialize(writer));
        if (this.params.length)
            writer.writeRepeatedMessage(12, this.params, (item: KVpair) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CmMsgBase {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CmMsgBase();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.client = reader.readInt32();
                    break;
                case 3:
                    message.player = reader.readInt32();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.json = reader.readString();
                    break;
                case 6:
                    reader.readMessage(message.srcSlot, () => message.srcSlot = CmSlot.deserialize(reader));
                    break;
                case 7:
                    message.inform = reader.readString();
                    break;
                case 8:
                    reader.readMessage(message.dstSlot, () => message.dstSlot = CmSlot.deserialize(reader));
                    break;
                case 9:
                    message.count = reader.readInt32();
                    break;
                case 10:
                    message.client_to = reader.readInt32();
                    break;
                case 11:
                    reader.readMessage(message.roster, () => pb_1.Message.addToRepeatedWrapperField(message, 11, dependency_1.Rost.deserialize(reader), dependency_1.Rost));
                    break;
                case 12:
                    reader.readMessage(message.params, () => pb_1.Message.addToRepeatedWrapperField(message, 12, KVpair.deserialize(reader), KVpair));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): CmMsgBase {
        return CmMsgBase.deserialize(bytes);
    }
}
